#!/bin/sh

# Project 6: Boiler
# A shell script to extend project 1: beetle, which simulated "boiling beetles"
# When a SIGUSR2 is invoked, causes the current operations to be dumped to a statefile that can be used to resume at a later point. 


# Check if there are no opts arguments
NO_ARGS=0
E_OPTERROR=85
if [ $# -eq "$NO_ARGS" ]
	then
	echo "usage: boiler {-r statefile} {-p plotfile} {-i min max step} {-n num}"
	exit $E_OPTERROR
fi

# Initialize Variables
min=
max=
step=
num=
statefile=
plotfile=
P_FLAG=0
R_FLAG=0
N_FLAG=0
I_FLAG=0
declare -a square
declare -a lifetime
counter=0
out=
inp=
str=
leng=

# Grab arguments off command line
while [ $# -ne 0 ]
	do
		if [ $1 = "-r" ]
			then
			shift
			R_FLAG=1
			statefile=$1
			shift
			break
		elif [ $1 = "-p" ]	
			then
			shift
			P_FLAG=1
			plotfile=$1
			shift
		elif [ $1 = "-n" ]
			then
			N_FLAG=1
			shift
			num=$1
			shift
		elif [ $1 = "-i" ]
			then
			I_FLAG=1
			shift
			min=$1
			shift
			max=$1
			shift
			step=$1
			shift
		else
			echo "invalid argument: $1"
			echo "usage: boiler {-r statefile} {-p plotfile} {-i min max step} {-n num}"
        		exit $E_OPTERROR	
		fi
done

# Argument Checking
if [[ $N_FLAG = 1 && $I_FLAG = 0 ]]; then
	echo "normal invocation requires both -i and -n arguments"
	echo "usage: boiler {-r statefile} {-p plotfile} {-i min max step} {-n num}"
        exit $E_OPTERROR
fi

if [[ $N_FLAG = 0 && $I_FLAG = 1 ]]; then
        echo "normal invocation requires both -i and -n arguments"
        echo "usage: boiler {-r statefile} {-p plotfile} {-i min max step} {-n num}"
        exit $E_OPTERROR
fi

if [ $N_FLAG = 1 ]; then
	re='^[0-9]+$'
	if ! [[ $min =~ $re ]]; then
		echo "error: $min not a number"
		echo "usage: boiler {-r statefile} {-p plotfile} {-i min max step} {-n num}"
        exit $E_OPTERROR
    elif ! [[ $max =~ $re ]]; then
		echo "error: $max not a number"
		echo "usage: boiler {-r statefile} {-p plotfile} {-i min max step} {-n num}"
        exit $E_OPTERROR
    elif ! [[ $step =~ $re ]]; then
		echo "error: $step not a number"
		echo "usage: boiler {-r statefile} {-p plotfile} {-i min max step} {-n num}"
        exit $E_OPTERROR
    elif ! [[ $num =~ $re ]]; then
		echo "error: $num not a number"
		echo "usage: boiler {-r statefile} {-p plotfile} {-i min max step} {-n num}"
        exit $E_OPTERROR
    fi

fi

if [ $R_FLAG = 1 ] 
	then
	if [[ $P_FLAG = 1 || $I_FLAG = 1 || $N_FLAG = 1 ]]; then
		echo "restore mode takes only -r and the statefile!"
		echo "usage: boiler {-r statefile} {-p plotfile} {-i min max step} {-n num}"
        exit $E_OPTERROR
	fi
fi

# Recovery Mode

if [ $R_FLAG = 1 ]
	then

	if [ ! -f $statefile ]; then
    echo "file not found!"
    echo "usage: boiler {-r statefile} {-p plotfile} {-i min max step} {-n num}"
    exit $E_OPTERROR
	fi

	inp=$(cat "$statefile")
	str=($inp)
	leng=${#str[@]}
	arychk=0
	arybuild=0
	for ((i=0;i<"$leng";i++)); do
		if [ $arychk = 0 ]; then
			P_FLAG=${str[i]}
			if [ $P_FLAG = 1 ]; then
				((i++))
				plotfile=${str[i]}
			fi
			((i++))
			min=${str[i]}
			((i++))
			max=${str[i]}
			((i++))
			step=${str[i]}
			((i++))
			num=${str[i]}
			((i++))
			counter=${str[i]}
			((arychk+=1))
		else
			square[arybuild]=${str[i]}
			((i++))
			lifetime[arybuild]=${str[i]}
			((arybuild+=1))
		fi	
	done
fi

# Traps

quit() {
	echo "$P_FLAG" >> beetle.state
	if [ $P_FLAG = 1 ]
		then
		echo "$plotfile" >> beetle.state
	fi
	echo "$min" >> beetle.state
	echo "$max" >> beetle.state
	echo "$step" >> beetle.state
	echo "$num" >> beetle.state
	echo "$counter" >> beetle.state
	for ((i=0;i<"$counter";i++)); do
		echo "${square[i]}" >> beetle.state
		echo "${lifetime[i]}" >> beetle.state
	done

	exit
}

trap "exit" SIGINT 
trap 'echo current square size: $min' SIGUSR1
trap quit SIGUSR2

# Basic Use

while [ $min -le $max ]; do
	out=$(../p1/beetle $min $num )
	square[counter]=$min
	temp=($out)
	lifetime[counter]=${temp[10]}
	min=$((min + step))
	counter=$(( counter + 1 ))

done

# Special Case: Min more than max
if [ $counter = 0 ]
	then
	out=$(../p1/beetle $min $num )
	square[counter]=$min
    temp=($out)
    lifetime[counter]=${temp[10]}
	counter=$(( counter + 1 ))
fi

# Print output

for ((i=0;i<"$counter";i++)); do
	echo "${square[i]} ${lifetime[i]}"
done

for ((i=0;i<"$counter";i++)); do
	echo "${square[i]} ${lifetime[i]}" >> plot.dat
done

# Plot

if [ $P_FLAG = 1 ] 
then
	gnuplot << EOF
	set terminal png
	set xlabel "Square Side (inches)"
	set ylabel "Mean Beetle Lifetime (seconds)"
	set output "$plotfile"
	plot "plot.dat"
EOF
	
fi

rm -f plot.dat
